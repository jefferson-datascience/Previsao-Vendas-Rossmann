# 0.0 Pacotes e Bibliotecas

import pandas as pd
import numpy  as np
import streamlit as st
import plotly.express as px
from datetime import datetime

# 1.0 Carregamento dos Dados
df1_loja = pd.read_parquet('DadosLoja.parquet', engine='fastparquet')
df1_faturamento = pd.read_parquet('DadosTreino.parquet', engine='fastparquet')
df1_predicoes = pd.read_parquet('BasePredita.parquet', engine='fastparquet')

# Dados Finais
df1 = df1_faturamento.merge(df1_loja, how='left', on='Store')

# Trativa de Texto
df1['Date'] = pd.to_datetime(df1['Date'], format='%Y-%m-%d')
df1['Month'] = df1['Date'].dt.strftime('%Y-%m')
df1['Year'] = df1['Date'].dt.strftime('%Y')


# Menu de Barra Lateral
st.sidebar.image('../Imagens/LogoRossmannSideBar.jpg')
st.sidebar.write("Navegue pelo Projeto")
pagina = st.sidebar.selectbox("",["Apresenta√ß√£o", "An√°lise de Faturamento", "Monitoramento de Faturamento", "Vis√£o Gestores"])


# Estilo customizado
st.sidebar.markdown(
    """
    <style>
    .sidebar-links a {
        display: block;
        padding: 8px 12px;
        margin: 6px 0;
        background-color: #f0f2f6;
        border-radius: 8px;
        color: #333333;
        text-decoration: none;
        font-weight: 500;
        transition: all 0.2s ease-in-out;
    }
    .sidebar-links a:hover {
        background-color: #dbe1ec;
        color: #000000;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Conte√∫do na barra lateral
st.sidebar.markdown(
    """
    ### üåê Meus Contatos
    <div class="sidebar-links">
        <a href="https://github.com/jefferson-datascience" target="_blank">üíª GitHub</a>
        <a href="https://www.linkedin.com/in/jeffersonhenriquecandido/" target="_blank">üîó LinkedIn</a>
    </div>
    """,
    unsafe_allow_html=True
)


if pagina == "Apresenta√ß√£o": 

    st.title("Bem-vindo ao Projeto de An√°lise de Faturamento da Rossmann")

    st.image('../Imagens/LogoRossmann.jpg')

    st.write(
        "Este projeto tem como objetivo aprimorar minhas habilidades em an√°lise estat√≠stica de regress√£o aplicada ao faturamento no varejo, "
        "bem como no desenvolvimento de modelos preditivos baseados em aprendizado de m√°quina supervisionado e t√©cnicas de modelagem de dados. "
        "Todas as an√°lises realizadas est√£o fundamentadas em um problema real de neg√≥cio, que guia cada etapa do processo de investiga√ß√£o e constru√ß√£o do modelo."
    )

    st.write(
        "Os dados utilizados neste projeto s√£o p√∫blicos e est√£o dispon√≠veis na plataforma de competi√ß√µes de Ci√™ncia de Dados **Kaggle**."
    )

    st.header("Problema de Neg√≥cio")

    st.write(
        "Entre os anos de 2013 e 2015 (at√© julho), foi identificada uma tend√™ncia de queda no faturamento da rede de drogarias **Rossmann**. "
        "Diante desse cen√°rio, a diretoria solicitou uma an√°lise detalhada para entender como diferentes vari√°veis impactam, positiva ou negativamente, o desempenho das lojas. "
        "Al√©m disso, considerando a din√¢mica di√°ria e semanal do varejo, foi requisitada a constru√ß√£o de um modelo preditivo que permita estimar o faturamento dos pr√≥ximos 6 dias. "
        "Com essas previs√µes em m√£os, a empresa poder√° tomar decis√µes mais √°geis e estrat√©gicas, como ativar promo√ß√µes, ajustar pre√ßos e otimizar o abastecimento de estoques."
    )

    st.subheader("Destrinchando a Demanda")

    st.write("O projeto foi estruturado com base em dois grandes desafios:")

    st.markdown(
        "**1¬∫ Problema ‚Äì An√°lise de Impacto de Vari√°veis:** Investigar como determinadas vari√°veis influenciam o faturamento das lojas. "
        "Ser√£o utilizadas t√©cnicas de regress√£o para quantificar o efeito de cada vari√°vel no desempenho financeiro."
    )

    st.markdown(
        "**2¬∫ Problema ‚Äì Previs√£o de Faturamento:** Desenvolver um modelo preditivo capaz de estimar o faturamento total dos pr√≥ximos 6 dias. "
        "Essa antecipa√ß√£o facilitar√° a implementa√ß√£o de estrat√©gias de curto prazo com maior assertividade."
    )

    st.header("Entreg√°veis do Projeto")

    st.write(
        "Para definir os entreg√°veis, √© fundamental considerar quem ser√£o os principais consumidores dessas informa√ß√µes. "
        "Embora as demandas tenham partido da diretoria, os dados gerados tamb√©m ser√£o cruciais para os gerentes de loja, que atuam diretamente na execu√ß√£o das estrat√©gias comerciais."
    )

    st.markdown(
        "**Para o 1¬∫ problema**, ser√° entregue um relat√≥rio anal√≠tico detalhado com os coeficientes da regress√£o e an√°lises de correla√ß√£o. "
        "Esse material permitir√° que tanto a diretoria quanto os gestores compreendam os fatores que influenciam o faturamento e ajustem suas estrat√©gias de forma mais eficiente. "
        "Al√©m disso, ser√° desenvolvido um **dashboard interativo** com visualiza√ß√µes do desempenho da rede como um todo (foco na diretoria) e tamb√©m em n√≠vel de loja (foco nos gestores)."
    )

    st.markdown(
        "**Para o 2¬∫ problema**, ser√° implementado um modelo preditivo que fornecer√° estimativas do faturamento total dos pr√≥ximos 6 dias. "
        "Essas informa√ß√µes ser√£o integradas ao mesmo dashboard mencionado anteriormente, permitindo um acompanhamento consolidado e estrat√©gico das proje√ß√µes futuras."
    )

elif pagina == "An√°lise de Faturamento":

    st.header("Vari√°veis para a An√°lise de Faturamento")

    st.write(
        "Para que uma an√°lise seja consistente, √© fundamental conhecer as vari√°veis envolvidas. A seguir, est√£o listadas as vari√°veis selecionadas para compreender o impacto de cada uma no faturamento:"
    )

    st.write("As vari√°veis fornecidas para a an√°lise estat√≠stica foram:")

    st.markdown("**Store**: Identificador √∫nico para cada loja.")
    st.markdown("**Sales**: Faturamento da loja em um determinado dia.")
    st.markdown("**Customers**: N√∫mero de clientes em um dado dia.")
    st.markdown("**Open**: Indica se a loja estava aberta (1) ou fechada (0).")
    st.markdown(
        "**StateHoliday**: Indica feriados estaduais. 'a' = feriado p√∫blico, 'b' = P√°scoa, 'c' = Natal, '0' = nenhum. Em geral, as lojas est√£o fechadas nesses dias."
    )
    st.markdown("**SchoolHoliday**: Indica se a loja foi afetada por fechamento de escolas p√∫blicas.")
    st.markdown("**StoreType**: Tipo da loja, classificados como a, b, c ou d.")
    st.markdown("**Assortment**: N√≠vel de sortimento: 'a' = b√°sico, 'b' = extra, 'c' = estendido.")
    st.markdown("**CompetitionDistance**: Dist√¢ncia (em metros) at√© o concorrente mais pr√≥ximo.")
    st.markdown("**CompetitionOpenSinceMonth/Year**: M√™s e ano de abertura do concorrente mais pr√≥ximo.")
    st.markdown("**Promo**: Indica se h√° promo√ß√£o ativa na loja naquele dia.")
    st.markdown("**Promo2**: Indica se a loja participa da Promo2 (0 = n√£o, 1 = sim).")
    st.markdown("**Promo2SinceYear/Month**: Ano e m√™s em que a loja passou a participar da Promo2.")
    st.markdown(
        "**PromoInterval**: Meses em que a Promo2 √© reiniciada. Ex: 'Fev, Mai, Ago, Nov' indica relan√ßamentos nesses meses."
    )

    st.header("An√°lise das Vari√°veis Escolhidas no Faturamento")

    st.write(
        "Com base no entendimento das vari√°veis, foi realizada uma an√°lise explorat√≥ria para verificar como cada uma se relaciona com o faturamento. Abaixo est√£o os principais destaques:"
    )

    st.markdown("- **Day of Week**: Os primeiros dias da semana apresentam maior faturamento. Sextas, s√°bados e domingos t√™m queda nas vendas.")
    st.image('../Imagens/DayOfWeekVSSales.png')

    st.markdown("- **Customers**: Mais clientes resultam diretamente em maior faturamento.")
    st.image('../Imagens/DayOfWeekVSSales.png')

    st.markdown("- **CompetitionDistance**: H√° uma leve tend√™ncia de queda no faturamento conforme a dist√¢ncia do concorrente diminui. Lojas com concorrentes " /
                "pr√≥ximos tendem a promover mais, aumentando as vendas.")
    st.image('../Imagens/CompetitonDistanceVSSales.png')

    st.markdown("- **Promo**: Promo√ß√µes aumentam significativamente o volume de vendas.")
    st.image('../Imagens/PromoVSSales.png')

    st.markdown("- **SchoolHoliday**: Lojas pr√≥ximas a escolas tendem a ter maior faturamento durante os feriados escolares, devido √† maior movimenta√ß√£o de segunda a s√°bado.")
    st.image('../Imagens/SchoolHolidayVSSales.png')

    st.markdown("- **Promo2**: Promo√ß√µes cont√≠nuas perdem efic√°cia ao longo do tempo, pois os clientes n√£o repetem a compra com tanta frequ√™ncia.")
    st.image('../Imagens/SchoolHolidayVSSales.png')

    st.markdown("- **StateHoliday**: O faturamento tende a ser menor em dias de feriado.")
    st.image('../Imagens/StateHolidayVSSales.png')

    st.markdown("- **Assortment**: Lojas com sortimento intermedi√°rio performam melhor. Sortimentos b√°sicos n√£o atendem bem √† demanda, e sortimentos excessivos" /
                " incluem produtos de baixa rotatividade.")
    st.image('../Imagens/AssortmentVSSales.png')

    st.markdown("- **StoreType**: Lojas do tipo 'b' apresentam maior faturamento m√©dio.")
    st.image('../Imagens/StoreTypeVSSales.png')

    st.markdown("- **CompetitionOpenSinceYear/Month**: O tempo de abertura do concorrente mais pr√≥ximo n√£o apresentou impacto significativo nas vendas.")
    st.image('../Imagens/CompetitionOpenSinceYearVSSales.png')
    st.image('../Imagens/CompetitionOpenSinceMonthVSSales.png')

    st.header("An√°lise de Correla√ß√£o")

    st.write(
        "Utilizando os m√©todos de correla√ß√£o de Pearson e Spearman, foram identificadas vari√°veis com rela√ß√£o significativa ao faturamento e baixa colinearidade entre si. As principais correla√ß√µes s√£o:"
    )

    st.markdown("- **Promo**: Correla√ß√£o positiva (0.43). Promo√ß√µes atraem mais clientes.")
    st.markdown("- **PublicHoliday**: Correla√ß√£o negativa (-0.20). Vendas caem durante feriados.")
    st.markdown("- **DayOfWeek**: Correla√ß√£o negativa (-0.18). Vendas reduzem no final de semana.")
    st.markdown("- **Customers**: Correla√ß√£o forte (0.79). Mais clientes = mais faturamento.")
    st.markdown("- **Assortment**: Correla√ß√£o positiva (0.12). Mais variedade = mais vendas.")
    st.markdown("- **Promo2**: Correla√ß√£o levemente negativa (-0.10). Promo√ß√µes cont√≠nuas perdem efic√°cia com o tempo.")

    st.header("An√°lise de Impacto de Vari√°vel")

    st.write("As vari√°veis que mais influenciam o faturamento das lojas Rossmann foram identificadas com base na an√°lise de regress√£o. S√£o elas:")

    st.markdown("**Promo**: Aumento m√©dio de US/$ 559.85 por dia (varia√ß√£o: US/$ 556.31 ‚Äì US/$ 563.39).")
    st.markdown("**Promo2**: Impacto positivo menor, com aumento m√©dio de US/$ 126.21 por dia (varia√ß√£o: US/$ 122.81 ‚Äì US/$ 129.61).")
    st.markdown("**PublicHoliday**: Redu√ß√£o m√©dia de US/$ 23.67 (varia√ß√£o: US/$ 20.36 ‚Äì US/$ 26.99).")
    st.markdown("**DayOfWeek**: Redu√ß√£o m√©dia de US/$ 49.14 por dia ao longo da semana (varia√ß√£o: US/$ 45.68 ‚Äì US/$ 52.60).")
    st.markdown("**Customers**: Cada aumento no n√∫mero de clientes resulta em incremento m√©dio de US/$ 1,750.82 (varia√ß√£o: US/$ 1,747.19 ‚Äì US/$ 1,754.33).")
    st.markdown("**Assortment**: Maior variedade aumenta o faturamento em m√©dia US/$ 313.05 (varia√ß√£o: US/$ 309.73 ‚Äì US/$ 316.37).")

    st.header("Recomenda√ß√µes")

    st.markdown("1. Intensificar a√ß√µes de vendas no in√≠cio da semana, evitando os finais de semana.")
    st.markdown("2. Expandir o sortimento das lojas com variedade b√°sica, otimizando o mix de produtos.")
    st.markdown("3. Priorizar promo√ß√µes pontuais e estrat√©gicas em vez de promo√ß√µes cont√≠nuas.")
    st.markdown("4. Implementar a√ß√µes que aumentem o fluxo de clientes nas lojas.")


elif pagina == "Monitoramento de Faturamento":

    # ======================= Constru√ß√£o de Filtro da Se√ß√£o =======================
    
    # Montagem dos containers
    filtro_monitoramento1, filtro_monitoramento2 = st.columns(2) 

    # Constru√ß√£o dos filtros de loja e tipo de estoque
    with filtro_monitoramento1:
        selection_store = st.multiselect('Filtre o tipo de loja', ["a", "b", "c", "d"], default=["a", "b", "c", "d"])
    
    with filtro_monitoramento2:
        selection_assortment = st.multiselect('Filtre o tipo de estoque da loja', ["a", "b", "c"], default=["a", "b", "c"])

    # Constru√ß√£o do Dataset
    df1 = df1[(df1['StoreType'].isin(selection_store)) & (df1['Assortment'].isin(selection_assortment))].sort_values(by=['Date'], ascending=True)
    df1_predicoes = df1_predicoes[(df1_predicoes['StoreType'].isin(selection_store)) & (df1_predicoes['Assortment'].isin(selection_assortment))]

    # 2.0 Modelagem de Dados 
    assortment = df1_loja['Assortment'].value_counts().reset_index().rename(columns={'count':'Qtd.'})
    store_type = df1_loja['StoreType'].value_counts().reset_index().rename(columns={'count':'Qtd.'})


    # ======================= Constru√ß√£o dos indicadores gerais de acompanhamento =======================
    
    # Total de Faturamento
    total_sales = df1[df1['Date'] == df1['Date'].max()]['Sales'].sum()

    # Total de Clientes
    total_customers =  df1[df1['Date'] == df1['Date'].max()]['Customers'].sum()

    # Previs√£o Total das Pr√≥ximas 6 semanas
    previsao_seis_semanas = np.round(df1_predicoes['PredictionSalesNextSexWeek'].sum(), 2)

    # Total de Lojas
    fat_medio_client = np.round(df1[df1['Date'] == df1['Date'].max()]['Sales'].sum()/df1[df1['Date'] == df1['Date'].max()]['Customers'].sum(), 2)

    card1, card2 = st.columns(2)
    card1.metric(label='Faturamento Total Hoje',value=total_sales, border=True)
    card2.metric(label='Total de Cliente Hoje', value=total_customers, border=True)
    
    card3, card4 = st.columns(2)
    card3.metric(label='Faturamento M√©dio por Cliente', value=fat_medio_client, border=True)
    card4.metric(label='Total Faturamento Pr√≥ximos 6 dias', value=previsao_seis_semanas, border=True)


    # ======================= Acompanhamento de Faturamento =======================

    # T√≠tulo da Se√ß√£o 
    st.title('**Faturamento das Lojas**')

    # --------------------- GR√ÅFICO FATURAMENTO 30 DIAS ------------------

    # Defini√ß√£o de Container para armazenar o gr√°fico
    container_fat = st.container(border=True)

    # Cabe√ßalho do gr√°fico
    container_fat.markdown('**Faturamento - √öltimos 30 Dias**')
            
    # Data Limite para obter os √∫ltimos 30 dias de faturamento
    data_limite = df1['Date'].max() - pd.Timedelta(days=30)

    # Constru√ß√£o datasets para os gr√°ficos
    serie_historica_vendas_diario = df1[['Date', 'Sales']][df1['Date'] >= data_limite].groupby('Date').sum().reset_index()
            
    # Gr√°fico
    container_fat.line_chart(data=serie_historica_vendas_diario, x='Date', y='Sales',  use_container_width=True)

    # ------------------------- GR√ÅFICO DE FATURAMENTO MENSAL E ANUAL ------------------------------------

    # Containers para o faturamento mensal e anual
    graf1, graf2 = st.columns(2)


    # ------------------ Faturamento vis√£o mensal ----------------------
    with graf1:

        # Defini√ß√£o de Container
        container_graf1 = st.container(border=True)

        # Cabe√ßalho do gr√°fico
        container_graf1.markdown('**Faturamento - Vis√£o Mensal**')
        
        # Constru√ß√£o datasets para os gr√°ficos
        serie_historica_vendas_mensal = df1[['Month', 'Sales']].groupby('Month').sum().reset_index()

        # Gr√°fico
        container_graf1.line_chart(data=serie_historica_vendas_mensal, 
                                   x='Month', 
                                   y='Sales',  
                                   use_container_width=True)


    # --------------------- Faturamento Vis√£o Anual ------------------------
    with graf2:

        # Defini√ß√£o de Container 
        container_graf2 = st.container(border=True)

        # Cabe√ßalho do gr√°fico
        container_graf2.markdown("**Faturamento - Vis√£o Anual**")

        # Constru√ß√£o datasets para os gr√°ficos
        serie_historia_vendas_anual = df1[['Year', 'Sales']].groupby('Year').sum().reset_index()

        # Gr√°fico
        container_graf2.bar_chart(data=serie_historia_vendas_anual,
                    x='Year',
                    y='Sales',
                    use_container_width=True)   


    # ------------------ Tabela para Acompanhamento das Faturamento das Lojas - TOP 10 ------------------
    st.subheader(f"Participa√ß√£o das Lojas no Faturamento de {df1['Year'].max()}")

    # Defini√ß√£o de container para armazenar tabela
    container_graf3 = st.container(border=False)

    # T√≠tulo da Tabela
    container_graf3.markdown(f"**Faturamento das Lojas - Top 10**")
        
    # Modelagem de Dados
    top_10_lojas = df1[df1['Year']==df1['Year'].max()].groupby(by='Store')['Sales'].sum().reset_index().sort_values(by=['Sales'], ascending=False).iloc[0:10, :].reset_index(drop=True)
    sales_year = df1[df1['Year']==df1['Year'].max()]['Sales'].sum()
    top_10_lojas['Perc. Part.'] = (top_10_lojas['Sales']/sales_year)*100

    # Tabela estilizada 
    styled_table = top_10_lojas.style.hide(axis="index").set_table_styles(
            [{'selector': 'th, td', 'props': [('font-size', '12px')]}]
        )

    # Exibir no Streamlit
    container_graf3.dataframe(styled_table, use_container_width=True)

    # Defini√ß√£o de Container para acompanhamento na paticipa√ß√£o do faturamento por tipo de loja e tipo de estoque
    graf4, graf5 = st.columns(2)

    with graf4:

        container_graf4 = st.container(border=True)

        # T√≠tulo da Tabela
        container_graf4.markdown(f"**Tipos de Loja**")

        # Constru√ß√£o do Dataset
        faturamento_tipo_loja = df1[df1['Year']==df1['Year'].max()].groupby(by='StoreType')['Sales'].sum().reset_index().sort_values(by=['Sales'], ascending=False).reset_index(drop=True)
    
    # Constru√ß√£o do Gr√°fico
        pie_storetype = px.pie(data_frame=faturamento_tipo_loja, values='Sales', names='StoreType')
        
        # Exibi√ß√£o do Resultado
        container_graf4.plotly_chart(pie_storetype)

    with graf5:

        container_graf5 = st.container(border=True)

        # T√≠tulo da Tabela
        container_graf5.markdown(f"**Tipo de Estoque**")

        # Constru√ß√£o do Dataset
        faturamento_tipo_loja = df1[df1['Year']==df1['Year'].max()].groupby(by='Assortment')['Sales'].sum().reset_index().sort_values(by=['Sales'], ascending=False).reset_index(drop=True)
    
    # Constru√ß√£o do Gr√°fico
        pie_assortment = px.pie(data_frame=faturamento_tipo_loja, values='Sales', names='Assortment')
        
        # Exibi√ß√£o do Resultado
        container_graf5.plotly_chart(pie_assortment)



    # --------------------------- Acompanhamento das Movimenta√ß√µes de Clientes ---------------------------

    # T√≠tulo da Se√ß√£o
    st.title('**Movimenta√ß√µes de Clientes**')

    container_mov_clientes = st.container(border=True)

    # Cabe√ßalho do gr√°fico
    container_mov_clientes.markdown('**Movimenta√ß√µes Clientes - √öltimos 30 Dias**')

    # Constru√ß√£o datasets para os gr√°ficos
    serie_historica_clientes_diario = df1[['Date', 'Customers']][df1['Date'] >= data_limite].groupby('Date').sum().reset_index()
        
    # Gr√°fico
    container_mov_clientes.line_chart(data=serie_historica_clientes_diario, 
                x='Date', 
                y='Customers',  
                use_container_width=True
                )

    # Definindo containers para acompanhamento de clientes -  vis√£o Mensal e Anual
    graf6, graf7 = st.columns(2)

    # Container de Clientes
    with graf6:

        container_graf6 = st.container(border=True) 

        # Cabe√ßalho do gr√°fico
        container_graf6.markdown('**Movimenta√ß√£o de Clientes - Vis√£o Mensal**')
        
        # Constru√ß√£o datasets para os gr√°ficos
        serie_historica_clientes_mensal = df1[['Month', 'Customers']].groupby('Month').sum().reset_index()
        
        # Gr√°fico
        container_graf6.line_chart(data=serie_historica_clientes_mensal, 
                    x='Month', 
                    y='Customers',  
                    use_container_width=True
                    )
        
    with graf7:

        # Defini√ß√£o do Container
        container_graf7 = st.container(border=True)

        # Cabe√ßalho do gr√°fico
        container_graf7.markdown("**Movimenta√ß√µes de Clientes - Vis√£o Anual**")

        # Constru√ß√£o datasets para os gr√°ficos
        serie_historia_clientes_anual = df1[['Year', 'Customers']].groupby('Year').sum().reset_index()

        # Gr√°fico
        container_graf7.bar_chart(data=serie_historia_clientes_anual,
                    x='Year',
                    y='Customers',
                    use_container_width=True)   
        
elif pagina == "Vis√£o Gestores":

    lista_lojas = df1['Store'].unique().tolist()
    filter_store = st.multiselect("Filtre a loja que est√° sobre a sua gest√£o", lista_lojas, default=[1])

    # Constru√ß√£o do Dataset
    df_gestores = df1[df1['Store'].isin(filter_store)].sort_values(by=['Date'], ascending=True)
    df_gestores_pred = np.round(df1_predicoes[df1_predicoes['Store'].isin(filter_store)], 2)

    # ======================= Constru√ß√£o dos indicadores gerais de acompanhamento =======================
    
    # Total de Faturamento
    total_sales = df_gestores[df_gestores['Date'] == df_gestores['Date'].max()]['Sales'].sum()

    # Total de Clientes
    total_customers =  df_gestores[df_gestores['Date'] == df_gestores['Date'].max()]['Customers'].sum()
        # Previs√£o Total das Pr√≥ximas 6 semanas
    previsao_seis_semanas = np.round(df_gestores_pred['PredictionSalesNextSexWeek'].sum(), 2)

    # Total de Lojas
    fat_medio_client = np.round(df_gestores[df_gestores['Date'] == df_gestores['Date'].max()]['Sales'].sum()/df_gestores[df_gestores['Date'] == df_gestores['Date'].max()]['Customers'].sum(), 2)

    card5, card6 = st.columns(2)
    card5.metric(label='Faturamento Total Hoje',value=total_sales, border=True)
    card6.metric(label='Total de Cliente Hoje', value=total_customers, border=True)

    card7,card8 = st.columns(2)
    card7.metric(label='Faturamento M√©dio por Cliente', value=fat_medio_client, border=True)
    card8.metric(label='Previs√£o dos Pr√≥ximos 6 dias de vendas', value=previsao_seis_semanas, border=True)

    # ======================= Acompanhamento de Faturamento =======================

    # T√≠tulo da Se√ß√£o 
    st.title('**Faturamento das Lojas**')

    # --------------------- GR√ÅFICO FATURAMENTO 30 DIAS ------------------

    # Defini√ß√£o de Container para armazenar o gr√°fico
    container_fat = st.container(border=True)

    # Cabe√ßalho do gr√°fico
    container_fat.markdown('**Faturamento - √öltimos 30 Dias**')
            
    # Data Limite para obter os √∫ltimos 30 dias de faturamento
    data_limite = df_gestores['Date'].max() - pd.Timedelta(days=30)

    # Constru√ß√£o datasets para os gr√°ficos
    serie_historica_vendas_diario = df_gestores[['Date', 'Sales']][df1['Date'] >= data_limite].groupby('Date').sum().reset_index()
            
    # Gr√°fico
    container_fat.line_chart(data=serie_historica_vendas_diario, x='Date', y='Sales',  use_container_width=True)

    # ------------------------- GR√ÅFICO DE FATURAMENTO MENSAL E ANUAL ------------------------------------

    # Containers para o faturamento mensal e anual
    graf_gest1, graf_gest2 = st.columns(2)


    # ------------------ Faturamento vis√£o mensal ----------------------
    with graf_gest1:

        # Defini√ß√£o de Container
        container_graf_gest1 = st.container(border=True)

        # Cabe√ßalho do gr√°fico
        container_graf_gest1.markdown('**Faturamento - Vis√£o Mensal**')
        
        # Constru√ß√£o datasets para os gr√°ficos
        serie_historica_vendas_mensal = df_gestores[['Month', 'Sales']].groupby('Month').sum().reset_index()

        # Gr√°fico
        container_graf_gest1.line_chart(data=serie_historica_vendas_mensal, 
                                   x='Month', 
                                   y='Sales',  
                                   use_container_width=True)


    # --------------------- Faturamento Vis√£o Anual ------------------------
    with graf_gest2:

        # Defini√ß√£o de Container 
        container_graf_gest2 = st.container(border=True)

        # Cabe√ßalho do gr√°fico
        container_graf_gest2.markdown("**Faturamento - Vis√£o Anual**")

        # Constru√ß√£o datasets para os gr√°ficos
        serie_historia_vendas_anual = df_gestores[['Year', 'Sales']].groupby('Year').sum().reset_index()

        # Gr√°fico
        container_graf_gest2.bar_chart(data=serie_historia_vendas_anual,
                    x='Year',
                    y='Sales',
                    use_container_width=True)   


    # --------------------------- Acompanhamento das Movimenta√ß√µes de Clientes ---------------------------

    # T√≠tulo da Se√ß√£o
    st.title('**Movimenta√ß√µes de Clientes**')

    container_mov_clientes = st.container(border=True)

    # Cabe√ßalho do gr√°fico
    container_mov_clientes.markdown('**Movimenta√ß√µes Clientes - √öltimos 30 Dias**')

    # Constru√ß√£o datasets para os gr√°ficos
    serie_historica_clientes_diario = df_gestores[['Date', 'Customers']][df_gestores['Date'] >= data_limite].groupby('Date').sum().reset_index()
        
    # Gr√°fico
    container_mov_clientes.line_chart(data=serie_historica_clientes_diario, 
                x='Date', 
                y='Customers',  
                use_container_width=True
                )

    # Definindo containers para acompanhamento de clientes -  vis√£o Mensal e Anual
    graf_gest6, graf_gest7 = st.columns(2)

    # Container de Clientes
    with graf_gest6:

        container_graf_gest6 = st.container(border=True) 

        # Cabe√ßalho do gr√°fico
        container_graf_gest6.markdown('**Movimenta√ß√£o de Clientes - Vis√£o Mensal**')
        
        # Constru√ß√£o datasets para os gr√°ficos
        serie_historica_clientes_mensal = df_gestores[['Month', 'Customers']].groupby('Month').sum().reset_index()
        
        # Gr√°fico
        container_graf_gest6.line_chart(data=serie_historica_clientes_mensal, 
                    x='Month', 
                    y='Customers',  
                    use_container_width=True
                    )
        
    with graf_gest7:

        # Defini√ß√£o do Container
        container_graf_gest7 = st.container(border=True)

        # Cabe√ßalho do gr√°fico
        container_graf_gest7.markdown("**Movimenta√ß√µes de Clientes - Vis√£o Anual**")

        # Constru√ß√£o datasets para os gr√°ficos
        serie_historia_clientes_anual = df1[['Year', 'Customers']].groupby('Year').sum().reset_index()

        # Gr√°fico
        container_graf_gest7.bar_chart(data=serie_historia_clientes_anual,
                    x='Year',
                    y='Customers',
                    use_container_width=True)   